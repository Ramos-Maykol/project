import { Router } from 'express';
import { pool } from '../database/config';

const router = Router();

// Intenciones del chatbot
interface Intent {
  keywords: string[];
  response: (context?: any) => string;
  action?: string;
}

const intents: { [key: string]: Intent } = {
  saludo: {
    keywords: ['hola', 'buenos', 'buenas', 'hey', 'hi', 'saludos'],
    response: () => '¬°Hola! üëã Soy tu asistente virtual de manufactura. Puedo ayudarte con:\n\n‚Ä¢ Cotizaciones de productos personalizados\n‚Ä¢ Consultar estado de pedidos\n‚Ä¢ Informaci√≥n sobre tiempos de entrega\n‚Ä¢ Cat√°logo de productos\n\n¬øQu√© necesitas hoy?'
  },
  
  producto_personalizado: {
    keywords: ['elaborar', 'hacer', 'fabricar', 'construir', 'pueden hacer', 'hacen', 'fabrican'],
    response: (context) => {
      const msg = context?.message || '';
      let productType = 'producto personalizado';
      let suggestions = '';
      
      // Detectar tipo de producto
      if (msg.includes('mueble') || msg.includes('mesa') || msg.includes('silla') || msg.includes('escritorio')) {
        productType = 'mueble';
        suggestions = '\n\nüí° Sugerencias:\n‚Ä¢ Muebles est√°ndar (8h de producci√≥n)\n‚Ä¢ Muebles personalizados (12h de producci√≥n)';
      } else if (msg.includes('puerta')) {
        productType = 'puerta';
        suggestions = '\n\nüí° Sugerencias:\n‚Ä¢ Puertas est√°ndar (4h de producci√≥n)\n‚Ä¢ Puertas personalizadas (6h de producci√≥n)';
      } else if (msg.includes('ventana')) {
        productType = 'ventana';
        suggestions = '\n\nüí° Sugerencias:\n‚Ä¢ Ventanas est√°ndar (3h de producci√≥n)\n‚Ä¢ Ventanas personalizadas (5h de producci√≥n)';
      } else if (msg.includes('closet') || msg.includes('armario')) {
        productType = 'closet';
        suggestions = '\n\nüí° Sugerencias:\n‚Ä¢ Closets modulares (10h de producci√≥n)';
      } else if (msg.includes('cocina')) {
        productType = 'cocina';
        suggestions = '\n\nüí° Sugerencias:\n‚Ä¢ Cocinas integrales (20h de producci√≥n)';
      } else if (msg.includes('lavamanos') || msg.includes('lavabo') || msg.includes('lavatorio')) {
        productType = 'mueble de ba√±o personalizado';
        suggestions = '\n\nüí° Sugerencias:\n‚Ä¢ Muebles de ba√±o personalizados\n‚Ä¢ Lavamanos con medidas especiales\n‚Ä¢ Dise√±os adaptados para ni√±os';
      }
      
      return `¬°Por supuesto! üòä S√≠ podemos elaborar ${productType}.\n\nPara darte una cotizaci√≥n precisa, necesito algunos detalles:\n\nüìè **Dimensiones**:\n‚Ä¢ Ancho\n‚Ä¢ Alto\n‚Ä¢ Profundidad\n\nüì¶ **Cantidad**: ¬øCu√°ntas unidades necesitas?\n\nüé® **Material preferido**: Madera, metal, otro?\n\n‚è±Ô∏è **Urgencia**: ¬øTienes fecha l√≠mite?${suggestions}\n\n¬øPuedes darme estos detalles para calcular el tiempo y costo?`;
    }
  },
  
  consulta_pedido: {
    keywords: ['pedido', 'orden', 'ORD-', 'estado', 'seguimiento', 'tracking'],
    response: () => 'üì¶ Para consultar tu pedido, necesito el **n√∫mero de orden**.\n\nFormato: ORD-2024-XXX\n\nEjemplo: "¬øCu√°l es el estado del pedido ORD-2024-101?"\n\n¬øTienes el n√∫mero de orden?'
  },
  
  tiempo_entrega: {
    keywords: ['cuanto tarda', 'tiempo', 'demora', 'entrega', 'cuando', 'plazo'],
    response: () => '‚è±Ô∏è Los tiempos de entrega dependen de:\n\n1. **Tipo de producto**\n2. **Complejidad del dise√±o**\n3. **Cantidad solicitada**\n4. **Carga actual de producci√≥n**\n\nüìä **Tiempos promedio**:\n‚Ä¢ Productos est√°ndar: 2-5 d√≠as\n‚Ä¢ Productos personalizados: 5-10 d√≠as\n‚Ä¢ Proyectos grandes: 10-20 d√≠as\n\nüí° Para una estimaci√≥n exacta, ve a **"Solicitar Producto"** y el sistema calcular√° autom√°ticamente el tiempo usando nuestro modelo de IA.\n\n¬øQu√© tipo de producto necesitas?'
  },
  
  precio_cotizacion: {
    keywords: ['precio', 'costo', 'cuanto cuesta', 'cotizacion', 'presupuesto', 'valor'],
    response: () => 'üí∞ Para darte un precio exacto, necesito:\n\nüìè **Especificaciones**:\n‚Ä¢ Tipo de producto\n‚Ä¢ Dimensiones\n‚Ä¢ Material\n‚Ä¢ Cantidad\n\nüé® **Personalizaci√≥n**:\n‚Ä¢ Dise√±o est√°ndar o personalizado\n‚Ä¢ Acabados especiales\n‚Ä¢ Accesorios adicionales\n\nüìù **Opciones**:\n1. Usa **"Solicitar Producto"** para cotizaci√≥n autom√°tica\n2. Descr√≠beme lo que necesitas aqu√≠\n3. Contacta a ventas: ventas@manufactura.com\n\n¬øQu√© prefieres?'
  },
  
  catalogo_productos: {
    keywords: ['productos', 'catalogo', 'que hacen', 'que fabrican', 'que venden', 'opciones'],
    response: () => 'üìã **Nuestro Cat√°logo de Productos**:\n\nü™ë **Muebles**\n‚Ä¢ Est√°ndar (mesas, sillas, escritorios)\n‚Ä¢ Personalizados (dise√±os √∫nicos)\n\nüö™ **Puertas**\n‚Ä¢ Est√°ndar (medidas comunes)\n‚Ä¢ Personalizadas (cualquier tama√±o)\n\nü™ü **Ventanas**\n‚Ä¢ Est√°ndar (aluminio/vidrio)\n‚Ä¢ Personalizadas (medidas especiales)\n\nüóÑÔ∏è **Closets**\n‚Ä¢ Modulares (adaptables)\n\nüç≥ **Cocinas Integrales**\n‚Ä¢ Dise√±os completos\n\n‚ú® **Productos Especiales**\n‚Ä¢ Muebles de ba√±o\n‚Ä¢ Muebles infantiles\n‚Ä¢ Dise√±os a medida\n\n¬øQu√© te interesa?'
  },
  
  ayuda: {
    keywords: ['ayuda', 'help', 'que puedes hacer', 'opciones', 'menu'],
    response: () => 'ü§ñ **Puedo ayudarte con**:\n\n1Ô∏è‚É£ **Cotizaciones**\n   ‚Ä¢ Productos personalizados\n   ‚Ä¢ Estimaci√≥n de tiempos\n   ‚Ä¢ C√°lculo de costos\n\n2Ô∏è‚É£ **Seguimiento**\n   ‚Ä¢ Estado de pedidos\n   ‚Ä¢ Tiempos de entrega\n   ‚Ä¢ Ubicaci√≥n en cola\n\n3Ô∏è‚É£ **Informaci√≥n**\n   ‚Ä¢ Cat√°logo de productos\n   ‚Ä¢ Capacidades de fabricaci√≥n\n   ‚Ä¢ Materiales disponibles\n\n4Ô∏è‚É£ **Soporte**\n   ‚Ä¢ Preguntas frecuentes\n   ‚Ä¢ Contacto con equipo\n   ‚Ä¢ Gu√≠as del sistema\n\nüí¨ Solo escribe tu pregunta naturalmente, ¬°entiendo lenguaje normal!'
  },
  
  agradecimiento: {
    keywords: ['gracias', 'thank', 'excelente', 'perfecto', 'genial'],
    response: () => '¬°De nada! üòä Me alegra poder ayudarte.\n\n¬øHay algo m√°s en lo que pueda asistirte?\n\nüí° Recuerda que puedo:\n‚Ä¢ Hacer cotizaciones\n‚Ä¢ Consultar pedidos\n‚Ä¢ Responder dudas'
  },
  
  despedida: {
    keywords: ['adios', 'chao', 'bye', 'hasta luego', 'nos vemos'],
    response: () => '¬°Hasta pronto! üëã\n\nQue tengas un excelente d√≠a.\n\nSi necesitas algo m√°s, aqu√≠ estar√©. üòä'
  }
};

// Funci√≥n mejorada para detectar intenci√≥n
function detectIntent(message: string): string | null {
  const lowerMessage = message.toLowerCase().trim();
  
  for (const [intentName, intent] of Object.entries(intents)) {
    for (const keyword of intent.keywords) {
      if (lowerMessage.includes(keyword)) {
        return intentName;
      }
    }
  }
  
  return null;
}

// Funci√≥n para extraer n√∫mero de orden
function extractOrderNumber(message: string): string | null {
  const match = message.match(/ORD-\d{4}-\d{3}/i);
  return match ? match[0].toUpperCase() : null;
}

// Funci√≥n mejorada para procesar el mensaje
async function processMessage(message: string, userId?: number): Promise<string> {
  const lowerMessage = message.toLowerCase().trim();
  
  // Detectar n√∫mero de orden
  const orderNumber = extractOrderNumber(message);
  if (orderNumber) {
    try {
      const result = await pool.query(
        `SELECT o.*, pt.name as product_name 
         FROM orders o 
         LEFT JOIN product_types pt ON o.product_type_id = pt.id 
         WHERE o.order_number = $1`,
        [orderNumber]
      );
      
      if (result.rows.length > 0) {
        const order = result.rows[0];
        const statusEmoji = {
          'pending': '‚è≥',
          'in_progress': 'üî®',
          'completed': '‚úÖ',
          'delivered': 'üì¶'
        }[order.status] || 'üìã';
        
        const statusText = {
          'pending': 'Pendiente',
          'in_progress': 'En Producci√≥n',
          'completed': 'Completado',
          'delivered': 'Entregado'
        }[order.status] || order.status;
        
        return `${statusEmoji} **Pedido ${orderNumber}**\n\nüë§ Cliente: ${order.customer_name}\nüì¶ Producto: ${order.product_name}\nüìä Cantidad: ${order.quantity}\n‚è±Ô∏è Tiempo estimado: ${order.estimated_production_time}h\nüìÖ Entrega estimada: ${new Date(order.estimated_delivery_date).toLocaleDateString('es-ES')}\nüîñ Estado: **${statusText}**\n\n¬øNecesitas m√°s informaci√≥n?`;
      }
    } catch (error) {
      console.error('Error buscando pedido:', error);
    }
  }
  
  // Detectar intenci√≥n
  const intent = detectIntent(message);
  
  if (intent && intents[intent]) {
    return intents[intent].response({ message: lowerMessage, userId });
  }
  
  // Respuesta inteligente por defecto
  if (lowerMessage.includes('?')) {
    return 'ü§î Entiendo tu pregunta.\n\nPuedo ayudarte mejor si me dices:\n\n‚Ä¢ ¬øNecesitas cotizar un producto?\n‚Ä¢ ¬øQuieres consultar un pedido?\n‚Ä¢ ¬øBuscas informaci√≥n del cat√°logo?\n\nO simplemente escribe "ayuda" para ver todas mis funciones. üòä';
  }
  
  return 'üí¨ Gracias por tu mensaje.\n\nPara ayudarte mejor, puedes:\n\n1Ô∏è‚É£ Describir qu√© producto necesitas\n2Ô∏è‚É£ Consultar un pedido con su n√∫mero\n3Ô∏è‚É£ Escribir "ayuda" para ver opciones\n\n¬øQu√© necesitas?';
}

// Endpoint principal del chatbot
router.post('/message', async (req, res) => {
  try {
    const { message, userId } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: 'Mensaje requerido' });
    }
    
    // Procesar mensaje (ahora es async)
    const response = await processMessage(message, userId);
    
    // Guardar conversaci√≥n en la base de datos
    try {
      await pool.query(
        'INSERT INTO chatbot_conversations (user_id, user_message, bot_response, created_at) VALUES ($1, $2, $3, CURRENT_TIMESTAMP)',
        [userId || null, message, response]
      );
    } catch (dbError) {
      console.log('Error guardando conversaci√≥n:', dbError);
    }
    
    res.json({
      response,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error en chatbot:', error);
    res.status(500).json({ error: 'Error en el servidor' });
  }
});

// Obtener estad√≠sticas para el chatbot
router.get('/stats', async (req, res) => {
  try {
    // Obtener estad√≠sticas del sistema
    const ordersCount = await pool.query('SELECT COUNT(*) as total FROM orders');
    const pendingOrders = await pool.query('SELECT COUNT(*) as total FROM orders WHERE status = $1', ['pending']);
    const inProgressOrders = await pool.query('SELECT COUNT(*) as total FROM orders WHERE status = $1', ['in_progress']);
    const productTypes = await pool.query('SELECT COUNT(*) as total FROM product_types');
    
    res.json({
      totalOrders: parseInt(ordersCount.rows[0].total),
      pendingOrders: parseInt(pendingOrders.rows[0].total),
      inProgressOrders: parseInt(inProgressOrders.rows[0].total),
      productTypes: parseInt(productTypes.rows[0].total)
    });
  } catch (error) {
    console.error('Error obteniendo estad√≠sticas:', error);
    res.status(500).json({ error: 'Error en el servidor' });
  }
});

// Obtener informaci√≥n de pedido espec√≠fico
router.get('/order/:orderNumber', async (req, res) => {
  try {
    const { orderNumber } = req.params;
    
    const result = await pool.query(
      `SELECT o.*, pt.name as product_name 
       FROM orders o 
       LEFT JOIN product_types pt ON o.product_type_id = pt.id 
       WHERE o.order_number = $1`,
      [orderNumber]
    );
    
    if (result.rows.length === 0) {
      return res.json({
        found: false,
        message: `No encontr√© el pedido ${orderNumber}. Verifica el n√∫mero de orden.`
      });
    }
    
    const order = result.rows[0];
    const statusText = {
      'pending': 'Pendiente',
      'in_progress': 'En Producci√≥n',
      'completed': 'Completado',
      'delivered': 'Entregado'
    }[order.status] || order.status;
    
    res.json({
      found: true,
      order: {
        orderNumber: order.order_number,
        customer: order.customer_name,
        product: order.product_name,
        quantity: order.quantity,
        status: statusText,
        estimatedTime: order.estimated_production_time,
        estimatedDelivery: order.estimated_delivery_date
      },
      message: `Pedido ${orderNumber}:\n‚Ä¢ Cliente: ${order.customer_name}\n‚Ä¢ Producto: ${order.product_name}\n‚Ä¢ Estado: ${statusText}\n‚Ä¢ Tiempo estimado: ${order.estimated_production_time}h`
    });
  } catch (error) {
    console.error('Error buscando pedido:', error);
    res.status(500).json({ error: 'Error en el servidor' });
  }
});

export default router;
