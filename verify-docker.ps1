# Script de verificaci√≥n de Docker
# Verifica que todos los servicios est√©n funcionando correctamente

Write-Host "üîç Verificando servicios Docker..." -ForegroundColor Cyan
Write-Host ""

# Verificar que Docker est√© corriendo
docker info 2>&1 | Out-Null
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Docker no est√° corriendo" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Docker est√° corriendo" -ForegroundColor Green

# Verificar estado de los contenedores
Write-Host ""
Write-Host "üìä Estado de los contenedores:" -ForegroundColor Cyan
docker-compose ps

# Verificar salud de PostgreSQL
Write-Host ""
Write-Host "üîç Verificando PostgreSQL..." -ForegroundColor Cyan
docker-compose exec -T postgres pg_isready -U postgres 2>&1 | Out-Null
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ PostgreSQL est√° funcionando" -ForegroundColor Green
} else {
    Write-Host "‚ùå PostgreSQL no responde" -ForegroundColor Red
}

# Verificar API Backend
Write-Host ""
Write-Host "üîç Verificando API Backend..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/api/health" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ API Backend est√° funcionando" -ForegroundColor Green
        $content = $response.Content | ConvertFrom-Json
        Write-Host "   Database: $($content.database)" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå API Backend no responde" -ForegroundColor Red
}

# Verificar Nginx
Write-Host ""
Write-Host "üîç Verificando Nginx..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Nginx est√° funcionando" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Nginx no responde" -ForegroundColor Red
}

# Verificar n8n
Write-Host ""
Write-Host "üîç Verificando n8n..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:5678" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200 -or $response.StatusCode -eq 401) {
        Write-Host "‚úÖ n8n est√° funcionando" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå n8n no responde" -ForegroundColor Red
}

# Verificar vol√∫menes
Write-Host ""
Write-Host "üì¶ Vol√∫menes Docker:" -ForegroundColor Cyan
docker volume ls | Select-String "project"

# Resumen
Write-Host ""
Write-Host "=" * 60 -ForegroundColor Cyan
Write-Host "RESUMEN DE VERIFICACI√ìN" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan
Write-Host ""
Write-Host "URLs de acceso:" -ForegroundColor Yellow
Write-Host "  ‚Ä¢ Aplicaci√≥n:  http://localhost" -ForegroundColor White
Write-Host "  ‚Ä¢ API:         http://localhost/api/health" -ForegroundColor White
Write-Host "  ‚Ä¢ n8n:         http://localhost/n8n" -ForegroundColor White
Write-Host "  ‚Ä¢ PostgreSQL:  localhost:5432" -ForegroundColor White
Write-Host ""
Write-Host "Comandos √∫tiles:" -ForegroundColor Yellow
Write-Host "  ‚Ä¢ Ver logs:    docker-compose logs -f" -ForegroundColor White
Write-Host "  ‚Ä¢ Reiniciar:   docker-compose restart" -ForegroundColor White
Write-Host "  ‚Ä¢ Detener:     docker-compose down" -ForegroundColor White
Write-Host ""
